#include "mainwindow.h"
#include "./ui_mainwindow.h"
#include <QStringListModel>
#include <QStandardItemModel>
#include <QDebug>
#include <memory>
#include <QVBoxLayout>
#include <QPushButton>
#include <QLabel>
#include <QHBoxLayout>
#include <QSpacerItem>
#include <QDateTime>
#include "UserStatus.h"
#include <QPointer>
#include <QTimer>
#include <QScrollBar>
#include <thread>
#include <chrono>
#include "Message.h"
#include "startscreen.h"
#include "Logger.h"

MainWindow::MainWindow (std::shared_ptr<UserStatus> userStatus, QWidget *parent)
: QMainWindow(parent), _userStatus(std::move(userStatus)), ui(new Ui::MainWindow)
{
       ui->setupUi (this);

       setStyleDark();


       // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
       QTimer* timer = new QTimer(this);
       timer->setInterval(200);
       connect(timer, &QTimer::timeout, this, [this]() {
              if (_userStatus->hasUpdatePending()) {
              _userStatus->clearUpdatePending();
              resetMainWind(); // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Qt
              }
       });
       timer->start();

       /////////////////////////////// –û–±–Ω–æ–≤–ª–µ–Ω–∏—è ///////////////////////////////

       // –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏–∫–∞  —é–∑–µ—Ä–æ–≤
       Message12 mess12;
       json j12;
       mess12.to_json(j12);
       _userStatus->pushMessageToSend(j12.dump());

       //  –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
       Message13 mess13;
       json j13;
       mess13.to_json(j13);
       _userStatus->pushMessageToSend(j13.dump());

       // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
       QTimer* timer_list = new QTimer(this);
       timer_list->setInterval(3000); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
       connect(timer_list, &QTimer::timeout, this, [this]() {
              if (_userStatus->getNetworckConnect())
              {
                     // –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏–∫–∞  —é–∑–µ—Ä–æ–≤
                     Message12 mess12;
                     json j12;
                     mess12.to_json(j12);
                     _userStatus->pushMessageToSend(j12.dump());

                     //  –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                     Message13 mess13;
                     json j13;
                     mess13.to_json(j13);
                     _userStatus->pushMessageToSend(j13.dump());
              }
              else{
              // –ü–†–ò –ü–û–¢–ï–†–ò –°–í–Ø–ó–ò –ü–û–ö–ê –ü–†–û–°–¢–û –ó–ê–ö–´–í–ê–ï–ú, –ù–£–ñ–ù–û –î–û–ü–ò–°–ê–¢–¨ –õ–û–ì–ò–ö–£ –ü–û–í–¢–û–†–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
              //  –ü–ï–†–ï–î–û–í–ê–Ø –°–û–û–ë–©–ï–ù–ò–ï –° –î–ê–ù–ù–´–ú–ò getUser –ò –õ–£–ß–®–ï –°–î–ï–õ–ê–¢–¨ –≠–¢–û –í resetMainWind –°–†–ê–ó–£ –ü–û –ò–ó–ú–ï–ù–ò–ù–Æ –°–¢–ê–¢–£–°–ê NetworckConnect
                     _userStatus->stopApp();
                     this->close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
              }

       });
       timer_list->start();
}

MainWindow::~MainWindow () { 
       if (_userStatus)
              _userStatus->stopApp();
       delete ui;
 }


MainWindow *MainWindow::createClient(std::shared_ptr<UserStatus> userStatus)
{
       StartScreen s(userStatus, nullptr); //   –°–û–ó–î–ê–ï–¢–°–Ø StartScreen
       // s.connect_s();
       auto result = s.exec();            //   –ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø StartScreen (–º–æ–¥–∞–ª—å–Ω–æ)
       if(result == QDialog::Rejected)
       {
              return nullptr;
       }
       // —Å–æ–∑–¥–∞–µ—Ç—Å—è MainWindow –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–∑–∞–ø—É—Å–∫ —É–∂–µ –≤ Main)
       auto w = new MainWindow(userStatus);
       // w->setUserStatus(userStatus);
       w->setAttribute(Qt::WA_DeleteOnClose); //–£–¥–∞–ª–∏—Ç –µ—Å–ª–∏ –∑–∞–∫—Ä–æ–µ–º!
       QPointer<MainWindow> safeThis = w;
       return w;
}

void MainWindow::on_styleButton_clicked()
{
  static bool darkStyle = true;
  if(darkStyle){
    setStyleLight();
    darkStyle = false;
  } else{
      setStyleDark();
      darkStyle = true;
  }
  resetMainWind();
}


void MainWindow::setUserStatus(std::shared_ptr<UserStatus> userStatus){
       this->_userStatus = std::move(userStatus);
}


 // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç UserStatus
void MainWindow::resetMainWind(){
       resetChatListArea();
       resetNotifi();
       if (_userStatus->getResetMess())
       {
              resetMessagesArea();
              _userStatus->setResetMess(false); // —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              // get_logger() << "_userStatus->setResetMess(false); // —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è";
       }
}

void MainWindow::resetNotifi(){
       if (_userStatus->getNetworckConnect())
       {
       ui->notifi->setText("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É");
       }
       else
       {
       ui->notifi->setText("‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É");
       }
       // ui->notifi->setText(QString::fromStdString(_userStatus->getNotifi()));
}

void MainWindow::clearMessagesArea() {
    QLayout *layout = ui->scrollAreaWidgetContents->layout();
    if (!layout) return;

    QLayoutItem *item;
    while ((item = layout->takeAt(0)) != nullptr) {
        if (item->widget()) {
            delete item->widget();
        }
        delete item;
    }
}

void MainWindow::resetMessagesArea() {
       if (!_userStatus) return;

       clearMessagesArea();

       // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
       QWidget *scrollContentMessages = ui->scrollAreaWidgetContents;

       // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QVBoxLayout –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ layout
       QVBoxLayout *scrollLayoutMessages = qobject_cast<QVBoxLayout*>(scrollContentMessages->layout());
       if (!scrollLayoutMessages) {
              // –ï—Å–ª–∏ layout –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑
              scrollLayoutMessages = new QVBoxLayout(scrollContentMessages);
              scrollLayoutMessages->setAlignment(Qt::AlignTop);
              scrollLayoutMessages->setSpacing(5);
              scrollLayoutMessages->setContentsMargins(8, 8, 8, 8);
              scrollContentMessages->setLayout(scrollLayoutMessages);
       } else {
              // –ï—Å–ª–∏ layout —É–∂–µ –µ—Å—Ç—å —Ç–æ —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              scrollLayoutMessages->setAlignment(Qt::AlignTop);
              scrollLayoutMessages->setSpacing(5);
              scrollLayoutMessages->setContentsMargins(8, 8, 8, 8);
       }

       std::vector<MessageStructAdmin> message = _userStatus->getMessList();
       
       // –î–æ–±–∞–≤–ª—è–µ–º 
       for (MessageStructAdmin msg : message) {

              QWidget *messageWidget = new QWidget(scrollContentMessages);
              QHBoxLayout *messageLayout = new QHBoxLayout(messageWidget);
              messageLayout->setContentsMargins(0, 0, 0, 0);

              // –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
              QWidget *contentWidget = new QWidget(messageWidget);
              contentWidget->setObjectName(msg.messFromChatH ? "message-bubble-my" : "message-bubble-other");

              // –í–ê–ñ–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–æ–Ω —É —ç—Ç–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
              contentWidget->setAttribute(Qt::WA_StyledBackground, true); // —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ñ–æ–Ω–æ–º!


              QVBoxLayout *contentLayout = new QVBoxLayout(contentWidget);
              contentLayout->setContentsMargins(12, 8, 12, 8); // padding –≤–Ω—É—Ç—Ä–∏ bubble
              contentLayout->setSpacing(4);

              // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
              QLabel *messageText = new QLabel(contentWidget);
              messageText->setObjectName(msg.messFromChatH ? "message-text-my" : "message-text");
              messageText->setWordWrap(true);
              QString typeMess = (msg.messFromChatH) ? "–û–±—â–∏–π —á–∞—Ç:\n" : "–ü—Ä–∏–≤–∞—Ç\n";
              messageText->setText(QString("%1 %2 :\n %3").arg(typeMess, QString::fromStdString(msg.userName), QString::fromStdString(msg.mess)));

              messageText->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
              messageText->setAlignment(Qt::AlignLeft | Qt::AlignTop);

              // –í—Ä–µ–º—è
              QLabel *timeLabel = new QLabel(contentWidget);
              timeLabel->setObjectName(msg.messFromChatH ? "message-time-my" : "message-time");
              timeLabel->setText(QString::fromStdString(timestampToString(msg.time)));
              timeLabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);

              // –°–æ–±–∏—Ä–∞–µ–º
              contentLayout->addWidget(messageText);
              QHBoxLayout *metaLayout = new QHBoxLayout();
              metaLayout->addStretch();
              metaLayout->addWidget(timeLabel);
              contentLayout->addLayout(metaLayout);
              contentWidget->setLayout(contentLayout);

              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É bubble
              contentWidget->setMaximumWidth(400);

              // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ bubble –ø–æ –ø—Ä–∞–≤–æ–º—É/–ª–µ–≤–æ–º—É –∫—Ä–∞—é
              if (msg.messFromChatH) {
              messageLayout->addStretch();
              messageLayout->addWidget(contentWidget);
              } else {
              messageLayout->addWidget(contentWidget);
              messageLayout->addStretch();
              }

              messageWidget->setLayout(messageLayout);
              scrollLayoutMessages->addWidget(messageWidget);
       }

       // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
       scrollLayoutMessages->addStretch();

}


// –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
void MainWindow::clearChatListArea()
{
    // –ü–æ–ª—É—á–∞–µ–º layout –∏–∑ scrollAreaWidgetContentsListChat
    QLayout *layout = ui->scrollAreaWidgetContentsListChat->layout();
    if (layout) {
        QLayoutItem *item;
        while ((item = layout->takeAt(0)) != nullptr) {
            if (item->widget()) {
                delete item->widget(); // —É–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç (–∫–Ω–æ–ø–∫—É)
            }
            delete item; // –∏ —Å–∞–º item
        }
    }
}

// –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
void MainWindow::resetChatListArea()
{
       // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
       clearChatListArea();

       // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º layout
       QWidget *scrollContent = ui->scrollAreaWidgetContentsListChat;

       // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ layout
       QVBoxLayout *scrollLayout = qobject_cast<QVBoxLayout *>(scrollContent->layout());
       if (!scrollLayout) {
              scrollLayout = new QVBoxLayout(scrollContent);
              scrollLayout->setAlignment(Qt::AlignTop);
              scrollLayout->setSpacing(4);
              scrollContent->setLayout(scrollLayout);
       } else { // –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ layout
              scrollLayout->setAlignment(Qt::AlignTop);
              scrollLayout->setSpacing(4);
       }


       //–î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
       std::vector<AdminDataUsers> listUsers = _userStatus->getListUsers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ UserStatus pair<us.login, us.name>
       for (const auto& user : listUsers) {
              
              std::string banB = (user.banStatus) ? " ‚ÄºÔ∏è–ë–ê–ù " : "";
              std::string disB = (user.onlineStatus) ? "" : " ‚ùï ";
              const std::string& bottonTitle = banB + disB +  user.userName + " (" + user.userLogin + ")";

              QPushButton *chatButton = new QPushButton(scrollContent);
              chatButton->setText(QString::fromStdString(bottonTitle));
              chatButton->setMinimumHeight(50);
              chatButton->setMaximumHeight(50);
              chatButton->setObjectName("chat-button");

              connect(chatButton, &QPushButton::clicked, this, [user, this]() {
              
              SelectedUser sUser;
              sUser.userLogin = user.userLogin;
              sUser.userName = user.userName;
              sUser.ban = user.banStatus;
              sUser.disconn = user.onlineStatus;
              //–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
              _userStatus->setSelectedUser(sUser);

              // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
              QStandardItemModel *model = qobject_cast<QStandardItemModel*>(ui->selectedUser->model());
              if (!model) {
                     model = new QStandardItemModel(this);
                     ui->selectedUser->setModel(model);
              } else {
                     model->clear(); // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              }
              std::string ban = (sUser.ban) ? " üî¥ " : " üü¢ ";
              std::string dis = (sUser.disconn) ? " üü¢ " : " ‚ö™ ";
              std::string title = "–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + sUser.userName + " (" + sUser.userLogin + ") " + 
              "\n–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞ " + ban + " –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + dis;

              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chatName, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤)
              QStandardItem *item = new QStandardItem(QString::fromStdString(title));
              item->setEditable(false); // –æ–±—ã—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã
              model->appendRow(item);

              });

              scrollLayout->addWidget(chatButton);
       }

       // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∂–∏–º–∞–ª–∏—Å—å –≤–≤–µ—Ä—Ö
       scrollLayout->addStretch();

       // // —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
       // QScrollBar *vScrollBar = ui->scrollAreaMessage->verticalScrollBar();
       // vScrollBar->setValue(vScrollBar->maximum());
       
}



// TO DO –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å 
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—è–∂–µ–ª–æ–µ, –ø–æ–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
// TO DO –æ–±–º–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º bool –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
// –ó–∞–ø—Ä–æ—Å –∫ –ë–î N ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è,
// —Ç–æ –ø–æ—Å–ª–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—á–∫—É –¥–≤–∞–Ω–Ω–Ω—ã—Ö
void MainWindow::on_pushButtonDMess_clicked()
{
       // —Å–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –æ–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
       QScrollBar *vScrollBar = ui->scrollAreaMessage->verticalScrollBar();
       vScrollBar->setValue(vScrollBar->maximum());
}

void MainWindow::on_pushButton_BAN_clicked()
{
       Message11 m11;
       SelectedUser user = _userStatus->getSelectedUser();
       m11.user_login = user.userLogin;
       if (user.userLogin != ""){
              if (user.ban)
                     m11.ban_value = false;
              else
                     m11.ban_value = true;
              
              json j11;
              m11.to_json(j11);
              _userStatus->pushMessageToSend(j11.dump());
       }
        // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
       QStandardItemModel *model = qobject_cast<QStandardItemModel*>(ui->selectedUser->model());
       if (!model) {
              model = new QStandardItemModel(this);
              ui->selectedUser->setModel(model);
       } else {
              model->clear(); // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
       }
}


void MainWindow::on_pushButton_DISCONNECT_clicked()
{
       Message10 m10;
       SelectedUser user = _userStatus->getSelectedUser();
       m10.user_login = user.userLogin;
       if (user.userLogin != ""){
              json j10;
              m10.to_json(j10);
              _userStatus->pushMessageToSend(j10.dump());
       }
        // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
       QStandardItemModel *model = qobject_cast<QStandardItemModel*>(ui->selectedUser->model());
       if (!model) {
              model = new QStandardItemModel(this);
              ui->selectedUser->setModel(model);
       } else {
              model->clear(); // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
       }
}

