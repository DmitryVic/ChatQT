#include "startscreen.h"
#include "./ui_startscreen.h"
#include <QTimer>
#include "Logger.h"
#include <thread>
#include <chrono>

StartScreen::StartScreen(std::shared_ptr<UserStatus> userStatus, QWidget *parent) :
  QDialog(parent), _userStatus(userStatus), ui(new Ui::StartScreen)
{
  ui->setupUi(this);
  
  // –¢–∞–π–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  QTimer* timer = new QTimer(this);
  timer->setInterval(200);
  connect(timer, &QTimer::timeout, this, [this, userStatus]() {
  if (userStatus->getNetworckConnect())
  {
    ui->networckLabel->setText("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É");
  }
  else
  {
    ui->networckLabel->setText("‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É");
  }
  });
  timer->start();
  
  ui->labelInfo->setText("üïê –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞...");


  Message1 mess1;
  mess1.login = userStatus->getUser().getLogin();
  mess1.pass = userStatus->getUser().getPass();
  json j1;


  try {
    mess1.to_json(j1);
    std::string jsonStr = j1.dump();
    if (userStatus == nullptr)
    {
      get_logger() << "Error: userStatus is null\n";
      reject();
      return;
    }
    userStatus->pushMessageToSend(jsonStr);
  }
  catch(const std::exception& e) {
      get_logger() << "Error creating/sending message: " << e.what();
      reject();
      return;
  }


  const int intervalMs = 100;

  QTimer *timerConnect = new QTimer(this);
  timerConnect->setInterval(intervalMs);

  connect(timerConnect, &QTimer::timeout, this, [this, timerConnect]()  {

    get_logger() << "timerConnect userStatus->getAuthorizationStatus() " << _userStatus->getAuthorizationStatus();
    if(_userStatus->getAuthorizationStatus())
    {
      timerConnect->stop(); 
      ui->labelInfo->setText("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
      get_logger() << "_userStatus->getAuthorizationStatus(): " << _userStatus->getAuthorizationStatus();
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      accept();
      return;
    }
    else if(_userStatus->getServerResponseReg()) // –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç —Å false
    {
      timerConnect->stop(); 
      ui->labelInfo->setText("‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      reject();
      return;
    }
        
  });

  timerConnect->start();
}

StartScreen::~StartScreen()
{
  delete ui;
}
