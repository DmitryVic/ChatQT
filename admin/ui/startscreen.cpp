#include "startscreen.h"
#include "./ui_startscreen.h"
#include <QTimer>
#include "Logger.h"
#include <thread>
#include <chrono>

StartScreen::StartScreen(std::shared_ptr<UserStatus> userStatus, QWidget *parent) :
  QDialog(parent), _userStatus(userStatus), ui(new Ui::StartScreen)
{
  ui->setupUi(this);
  
  // –¢–∞–π–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  QTimer* timer = new QTimer(this);
  timer->setInterval(200);
  connect(timer, &QTimer::timeout, this, [this, userStatus]() {
  if (userStatus->getNetworckConnect())
  {
    ui->networckLabel->setText("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É");
  }
  else
  {
    ui->networckLabel->setText("‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É");
  }
  });
  timer->start();
  connect_s();
}

StartScreen::~StartScreen()
{
  delete ui;
}

// reject();
// accept();

void StartScreen::connect_s(){

  Message1 mess1;
  mess1.login = _userStatus->getUser().getLogin();
  mess1.pass = _userStatus->getUser().getPass();
  json j1;
  // mess1.to_json(j1);
  // _userStatus->pushMessageToSend(j1.dump());
  try {
      mess1.to_json(j1);
      std::string jsonStr = j1.dump();
      if (_userStatus == nullptr)
      {
        get_logger() << "Error: _userStatus is null\n";
        reject();
        return;
      }
      
      _userStatus->pushMessageToSend(jsonStr);
  }
  catch(const std::exception& e) {
      get_logger() << "Error creating/sending message: " << e.what();
      reject();
      return;
  }
  ui->labelInfo->setText("üïê –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞... (2 —Å–µ–∫)");
  
  int attempts = 0;
  while (true)
  {
    attempts++;
    if (attempts > 20) // —Ç–∞–π–º–∞—É—Ç 20 –ø–æ–ø—ã—Ç–æ–∫ (~2 —Å–µ–∫—É–Ω–¥—ã)
    {
      ui->labelInfo->setText("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ");
      reject();
      return;
    }

    std::this_thread::sleep_for(std::chrono::milliseconds(300));
    if(_userStatus->getAuthorizationStatus()  && _userStatus->getServerResponseReg())
    {
      ui->labelInfo->setText("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
      get_logger() << "_userStatus->getAuthorizationStatus(): " << _userStatus->getAuthorizationStatus();
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
       // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
       accept();
      return;
    }
    else if(_userStatus->getServerResponseReg() && !_userStatus->getAuthorizationStatus()) // –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç —Å false
    {
      ui->labelInfo->setText("‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      reject();
      return;
    }
    
  }

}
