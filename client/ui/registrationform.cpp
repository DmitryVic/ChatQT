#include "registrationform.h"
#include "./ui_registrationform.h"
#include <QMessageBox>
#include <thread>
#include <chrono>


RegistrationForm::RegistrationForm(QWidget *parent, std::shared_ptr<UserStatus> userStatus) :
  QWidget(parent), _userStatus(userStatus), ui(new Ui::RegistrationForm)
{
  ui->setupUi(this);
}

RegistrationForm::~RegistrationForm()
{
  delete ui;
}


void RegistrationForm::on_loginButton_clicked()
{
  emit loginRequested();
}


void RegistrationForm::on_buttonBox_accepted()
{
  if(ui->passwordEdit->text() !=
     ui->passwordConfirmEdit->text())
  {
    QMessageBox::critical(this,
                          tr("Error"),
                          tr("Passwords not match"));
    return;
  }
 Message2 mess2;
  mess2.login = ui->loginEdit->text().toStdString();
  mess2.pass = ui->passwordEdit->text().toStdString();
  mess2.name = ui->nameEdit->text().toStdString();

  json j2;
  mess2.to_json(j2);
  _userStatus->pushMessageToSend(j2.dump());

  ui->serwAnswer->setText("üïê –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ... (2 —Å–µ–∫)");
  
  int attempts = 0;
  while (true)
  {
    attempts++;
    if (attempts > 20) // —Ç–∞–π–º–∞—É—Ç 20 –ø–æ–ø—ã—Ç–æ–∫ (~2 —Å–µ–∫—É–Ω–¥—ã)
    {
      ui->serwAnswer->setText("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ");
      QMessageBox::critical(this,
                            tr("Error"),
                            tr("Timeout waiting for server response"));
      return;
    }
    
    std::this_thread::sleep_for(std::chrono::milliseconds(300));
    if(_userStatus->getAuthorizationStatus() && !_userStatus->getLoginBusy() && _userStatus->getServerResponseReg())
    {
      std::cerr << "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞";
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      emit accepted(); // —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      return;
    }
    else if(_userStatus->getLoginBusy() && _userStatus->getServerResponseReg())
    {
      ui->serwAnswer->setText("‚ö†Ô∏è –õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç");
      QMessageBox::critical(this,
                            tr("Error"),
                            tr("Login is busy"));
      _userStatus->setLoginBusy(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      return;
    }
    else if(!_userStatus->getAuthorizationStatus() && _userStatus->getServerResponseReg()){ //–û—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
      ui->serwAnswer->setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      QMessageBox::critical(this,
                            tr("Error"),
                            tr("Data error"));
      _userStatus->setServerResponseReg(false); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      return;
    }
  }
}



void RegistrationForm::on_buttonBox_rejected()
{
  emit rejected();
}

void RegistrationForm::setUserStatus(std::shared_ptr<UserStatus> userStatus) {
    _userStatus = userStatus;
}