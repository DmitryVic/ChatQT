#include "mainwindow.h"
#include "./ui_mainwindow.h"
#include "startscreen.h"
#include <QStringListModel>
#include <QStandardItemModel>
#include <QDebug>
#include <memory>
#include <QVBoxLayout>
#include <QPushButton>
#include <QLabel>
#include <QHBoxLayout>
#include <QSpacerItem>
#include <QDateTime>
#include "UserStatus.h"
#include <QPointer>
#include <QTimer>

MainWindow::MainWindow (QWidget *parent, std::shared_ptr<UserStatus> userStatus)
    : QMainWindow (parent), ui (new Ui::MainWindow), _userStatus(userStatus)
{
       ui->setupUi (this);

       setStyleDark();


       ui->messButtonPush->setText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì®");

       // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
       QTimer* timer = new QTimer(this);
       timer->setInterval(200);
       connect(timer, &QTimer::timeout, this, [this]() {
              if (_userStatus->hasUpdatePending()) {
              _userStatus->clearUpdatePending();
              resetMainWind(); // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Qt
              }
       });
       timer->start();


}

MainWindow::~MainWindow () { delete ui; }


MainWindow *MainWindow::createClient()
{
       StartScreen s;                  //   –°–û–ó–î–ê–ï–¢–°–Ø StartScreen
       auto result = s.exec();            //   –ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø StartScreen (–º–æ–¥–∞–ª—å–Ω–æ)
       if(result == QDialog::Rejected)
       {
       return nullptr;
       }
       // –î–∞–ª—å—à–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è MainWindow –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–∑–∞–ø—É—Å–∫ —É–∂–µ –≤ Main)
       auto w = new MainWindow();
       w->setAttribute(Qt::WA_DeleteOnClose); //–£–¥–∞–ª–∏—Ç –µ—Å–ª–∏ –∑–∞–∫—Ä–æ–µ–º!!

       std::shared_ptr userStatus = std::make_shared<UserStatus>();
       w->setPtrUserStatus(userStatus);

       QPointer<MainWindow> safeThis = w;

       return w;
}

void MainWindow::on_styleButton_clicked()
{
  static bool darkStyle = true;
  if(darkStyle){
    setStyleLight();
    darkStyle = false;
  } else{
      setStyleDark();
      darkStyle = true;
  }
  resetMainWind();
}


void MainWindow::setPtrUserStatus(std::shared_ptr<UserStatus> userStatus){
       this->_userStatus = std::move(userStatus);
}


 // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç UserStatus
void MainWindow::resetMainWind(){
       resetMessagesArea();
       resetChatListArea();
}


void MainWindow::clearMessagesArea() {
    QLayout *layout = ui->scrollAreaWidgetContents->layout();
    if (!layout) return;

    QLayoutItem *item;
    while ((item = layout->takeAt(0)) != nullptr) {
        if (item->widget()) {
            delete item->widget();
        }
        delete item;
    }
}

void MainWindow::resetMessagesArea() {
       if (!_userStatus) return;

       clearMessagesArea();

       // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
       QWidget *scrollContentMessages = ui->scrollAreaWidgetContents;

       // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QVBoxLayout –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å—Ç—å –ª–∏ —É–∂–µ layout
       QVBoxLayout *scrollLayoutMessages = qobject_cast<QVBoxLayout*>(scrollContentMessages->layout());
       if (!scrollLayoutMessages) {
              // –ï—Å–ª–∏ layout –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑
              scrollLayoutMessages = new QVBoxLayout(scrollContentMessages);
              scrollLayoutMessages->setAlignment(Qt::AlignTop);
              scrollLayoutMessages->setSpacing(5);
              scrollLayoutMessages->setContentsMargins(8, 8, 8, 8);
              scrollContentMessages->setLayout(scrollLayoutMessages);
       } else {
              // –ï—Å–ª–∏ layout —É–∂–µ –µ—Å—Ç—å —Ç–æ —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              scrollLayoutMessages->setAlignment(Qt::AlignTop);
              scrollLayoutMessages->setSpacing(5);
              scrollLayoutMessages->setContentsMargins(8, 8, 8, 8);
       }

       std::vector<MessageStruct> message = _userStatus->getMessList();
       
       // –î–æ–±–∞–≤–ª—è–µ–º 
       for (MessageStruct msg : message) {
              bool isMyMessage = msg.userLogin == _userStatus->getUser().getLogin();

              QWidget *messageWidget = new QWidget(scrollContentMessages);
              QHBoxLayout *messageLayout = new QHBoxLayout(messageWidget);
              messageLayout->setContentsMargins(0, 0, 0, 0);

              // –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
              QWidget *contentWidget = new QWidget(messageWidget);
              contentWidget->setObjectName(isMyMessage ? "message-bubble-my" : "message-bubble-other");

              // –í–ê–ñ–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–æ–Ω —É —ç—Ç–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
              contentWidget->setAttribute(Qt::WA_StyledBackground, true); // —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ñ–æ–Ω–æ–º!


              QVBoxLayout *contentLayout = new QVBoxLayout(contentWidget);
              contentLayout->setContentsMargins(12, 8, 12, 8); // padding –≤–Ω—É—Ç—Ä–∏ bubble
              contentLayout->setSpacing(4);

              // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
              QLabel *messageText = new QLabel(contentWidget);
              messageText->setObjectName(isMyMessage ? "message-text-my" : "message-text");
              messageText->setWordWrap(true);

              messageText->setText(QString("%1: %2").arg(QString::fromStdString(msg.userName), QString::fromStdString(msg.mess)));

              messageText->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
              messageText->setAlignment(Qt::AlignLeft | Qt::AlignTop);

              // –í—Ä–µ–º—è
              QLabel *timeLabel = new QLabel(contentWidget);
              timeLabel->setObjectName(isMyMessage ? "message-time-my" : "message-time");
              timeLabel->setText(QString::fromStdString(timestampToString(msg.time)));
              timeLabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);

              // –°–æ–±–∏—Ä–∞–µ–º
              contentLayout->addWidget(messageText);
              QHBoxLayout *metaLayout = new QHBoxLayout();
              metaLayout->addStretch();
              metaLayout->addWidget(timeLabel);
              contentLayout->addLayout(metaLayout);
              contentWidget->setLayout(contentLayout);

              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É bubble
              contentWidget->setMaximumWidth(400);

              // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ bubble –ø–æ –ø—Ä–∞–≤–æ–º—É/–ª–µ–≤–æ–º—É –∫—Ä–∞—é
              if (isMyMessage) {
              messageLayout->addStretch();
              messageLayout->addWidget(contentWidget);
              } else {
              messageLayout->addWidget(contentWidget);
              messageLayout->addStretch();
              }

              messageWidget->setLayout(messageLayout);
              scrollLayoutMessages->addWidget(messageWidget);
       }

              // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
       scrollLayoutMessages->addStretch();

       std::string chatName = _userStatus->getChatName();

       // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
       QStandardItemModel *model = qobject_cast<QStandardItemModel*>(ui->chatName->model());
       if (!model) {
              model = new QStandardItemModel(this);
              ui->chatName->setModel(model);
       } else {
              model->clear(); // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
       }

       // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é chatName, –∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤)
       QStandardItem *item = new QStandardItem(QString::fromStdString(chatName));
       item->setEditable(false); // –æ–±—ã—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã
       model->appendRow(item);
}


// –û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
void MainWindow::clearChatListArea()
{
    // –ü–æ–ª—É—á–∞–µ–º layout –∏–∑ scrollAreaWidgetContentsListChat
    QLayout *layout = ui->scrollAreaWidgetContentsListChat->layout();
    if (layout) {
        QLayoutItem *item;
        while ((item = layout->takeAt(0)) != nullptr) {
            if (item->widget()) {
                delete item->widget(); // —É–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç (–∫–Ω–æ–ø–∫—É)
            }
            delete item; // –∏ —Å–∞–º item
        }
    }
}

// –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
void MainWindow::resetChatListArea()
{
       // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
       clearChatListArea();

       // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º layout
       QWidget *scrollContent = ui->scrollAreaWidgetContentsListChat;

       // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ layout
       QVBoxLayout *scrollLayout = qobject_cast<QVBoxLayout *>(scrollContent->layout());
       if (!scrollLayout) {
              scrollLayout = new QVBoxLayout(scrollContent);
              scrollLayout->setAlignment(Qt::AlignTop);
              scrollLayout->setSpacing(4);
              scrollContent->setLayout(scrollLayout);
       } else { // –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ layout
              scrollLayout->setAlignment(Qt::AlignTop);
              scrollLayout->setSpacing(4);
       }

       //–î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–©–ò–ô –ß–ê–¢
       QPushButton *chatButton = new QPushButton(scrollContent);
       chatButton->setText(QString::fromStdString("–û–±—â–∏–π —á–∞—Ç"));
       chatButton->setMinimumHeight(50);
       chatButton->setMaximumHeight(50);
       chatButton->setObjectName("chat-button");

       connect(chatButton, &QPushButton::clicked, this, [this]() {
       // –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞

       });

       scrollLayout->addWidget(chatButton);

       //–î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–í–ê–¢–ù–´–ô–ï –ß–ê–¢–´
       std::vector<std::pair<std::string, std::string>> lastChatP = _userStatus->getListChatP(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ UserStatus pair<us.login, us.name>

       for (const auto& chat : lastChatP) {
              const std::string& chatLogin = chat.first;
              const std::string& chatName = chat.second;

              QPushButton *chatButton = new QPushButton(scrollContent);
              chatButton->setText(QString::fromStdString(chatName));
              chatButton->setMinimumHeight(50);
              chatButton->setMaximumHeight(50);
              chatButton->setObjectName("chat-button");

              connect(chatButton, &QPushButton::clicked, this, [chatLogin, this]() {
              qDebug() << "–í—ã–±—Ä–∞–Ω —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:" << QString::fromStdString(chatLogin);
              // –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
              });

              scrollLayout->addWidget(chatButton);
       }

       //–î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
        std::vector<std::pair<std::string, std::string>> listUsers = _userStatus->getListUsers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ UserStatus pair<us.login, us.name>
       for (const auto& user : listUsers) {
              const std::string& userLogin = user.first;
              const std::string& userName = user.second;

              QPushButton *chatButton = new QPushButton(scrollContent);
              chatButton->setText(QString::fromStdString(userName));
              chatButton->setMinimumHeight(50);
              chatButton->setMaximumHeight(50);
              chatButton->setObjectName("chat-button");

              connect(chatButton, &QPushButton::clicked, this, [userLogin, this]() {
              qDebug() << "–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" << QString::fromStdString(userLogin);
              // –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞
              });

              scrollLayout->addWidget(chatButton);
       }

       // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∂–∏–º–∞–ª–∏—Å—å –≤–≤–µ—Ä—Ö
       scrollLayout->addStretch();
}